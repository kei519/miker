# Update release, build and make-image-without-umount tasks when adding new crates.

[config]
# Skips default builds
skip_core_tasks = true
skip_git_env_info = true
skip_rust_env_info = true

[env]
CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = ["macros", "util"]

DISK_IMG = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/disk.img"
MOUNT_POINT = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/mnt"
DEFAULT_OVMF_VARS = "DEFAULT_OVMF_VARS.fd"
OVMF_VARS = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/OVMF_VARS.fd"

LOADER_NAME = "loader"
LOADER_TARGET = "x86_64-unknown-uefi"
LOADER_PATH = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${LOADER_TARGET}/debug/${LOADER_NAME}.efi"

KERNEL_NAME = "kernel"
KERNEL_TARGET = "x86_64-unknown-none"
KERNEL_PATH = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${KERNEL_TARGET}/debug/${KERNEL_NAME}"

[tasks.default]
alias = "make-image-release"

[tasks.member-release]
private = true
run_task = { name = "release", fork = true, paralell = true }

[tasks.member-build]
private = true
run_task = { name = "build", fork = true, parallel = true }

[tasks.check]
description = "check all crates"
run_task = "check"

[tasks.clippy]
description = "cargo clippy to check all crates"
run_task = "clippy"

[tasks.run]
description = "Run kernel in qemu with debug profile."
dependencies = ["make-image", "clean-ovmf", "check-ovmf_vars"]
workspace = false
script = '''
#!/usr/bin/env bash -ex

qemu-system-x86_64 \
    -m 256M \
    -drive if=pflash,format=raw,readonly=on,file=/usr/share/OVMF/OVMF_CODE.fd \
    -drive if=pflash,format=raw,file="${OVMF_VARS}" \
    -drive if=ide,index=0,media=disk,format=raw,file="${DISK_IMG}" \
    -monitor stdio \
    -enable-kvm \
    -machine q35 \
    -cpu host \
    -smp 4 \
    -device nec-usb-xhci,id=xhci \
    -s \
    ${@}
'''

[tasks.release-run]
description = "Run kernel in qemu with release profile."
extend = "run"
dependencies = ["make-image-release", "check-ovmf_vars"]

[tasks.make-image]
description = "Make boot image file with debug profile."
run_task = { name = ["make-image-without-umount", "umount"], fork = true, cleanup_task = "umount" }
workspace = false

[tasks.make-image-release]
description = "Make boot image file with release profile."
run_task = { name = ["make-image-release-without-umount", "umount"], fork = true, cleanup_task = "umount" }
workspace = false

[tasks.usb]
description = "Make a USB media a boot device with debug profile."
dependencies = ["usb-arg-check"]
run_task = { name = ["make-image-without-umount", "umount"], fork = true, cleanup_task = "umount" }
workspace = false
env = { MAKE_USB = "" }

[tasks.release-usb]
description = "Make a USB media a boot device with release profile."
dependencies = ["usb-arg-check"]
run_task = { name = ["make-image-release-without-umount", "umount"], fork = true, cleanup_task = "umount" }
workspace = false
env = { MAKE_USB = "" }

[tasks.usb-arg-check]
private = true
script = '''
#!/usr/bin/env bash -e

if [ -z "$1" ]; then
    echo "You have to specify to which drive is installed files" 1>&2
    exit 1
fi
'''

[tasks.make-image-without-umount]
private = true
dependencies = ["member-build"]
workspace = false
script = '''
#!/usr/bin/env bash -ex

if [[ -v MAKE_USB ]]; then
    DISK_IMG="$1:"
    sudo /bin/mount -o uid="${UID}",gid=$(id -g $(whoami)) -t drvfs "${DISK_IMG}" "${MOUNT_POINT}"
    rm -rf ${MOUNT_POINT}/*
else
    qemu-img create -f raw "${DISK_IMG}" 200M
    mkfs.fat -n "${CARGO_MAKE_PROJECT_NAME^^}" -s 2 -f 2 -R 32 -F 32 ${DISK_IMG}

    if [ ! -d "${MOUNT_POINT}" ]; then
        mkdir -p "${MOUNT_POINT}"
    fi
    sudo mount -o uid="${UID}",gid=$(id -g $(whoami)) "${DISK_IMG}" "${MOUNT_POINT}"
fi

LOADER_DEPLOY_PATH="${MOUNT_POINT}/EFI/BOOT/BOOTx64.EFI"
mkdir -p $(dirname "${LOADER_DEPLOY_PATH}")
cp "${LOADER_PATH}" "${LOADER_DEPLOY_PATH}"

KERNEL_DEPLOY_PATH="${MOUNT_POINT}/kernel"
cp "${KERNEL_PATH}" "${KERNEL_DEPLOY_PATH}"

sleep 0.5
'''

[tasks.make-image-release-without-umount]
private = true
extend = "make-image-without-umount"
dependencies = ["member-release"]
[tasks.make-image-release-without-umount.env]
LOADER_PATH = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${LOADER_TARGET}/release/${LOADER_NAME}.efi"
KERNEL_PATH = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${KERNEL_TARGET}/release/${KERNEL_NAME}"

[tasks.check-ovmf_vars]
private = true
workspace = false
script = '''
#!/usr/bin/env bash -ex

if [ ! -f "${OVMF_VARS}" ]; then
    cp "${DEFAULT_OVMF_VARS}" "${OVMF_VARS}"
fi
'''

[tasks.clean-ovmf]
description = "Clean OVMF_VARS.fd file."
workspace = false
script = '''
if [ -f "${OVMF_VARS}" ]; then
    rm -f "${OVMF_VARS}"
fi
'''

[tasks.umount]
description = "Unmount boot image file from mnt directory."
workspace = false
script = '''
#!/usr/bin/env bash -ex

if /usr/bin/mount | grep "${MOUNT_POINT}"; then
    sudo umount "${MOUNT_POINT}"
fi
'''
